substitutions:
  project_ver_let: f
  sub_on_press:    script_toggle_factory
  sub_blink_check: script_blink_check_factory


packages:
  kauf_rgbsw_update: !include kauf-rgbs-update.yaml


esphome:
  on_boot:
    then:
      - if:
          condition:
            lambda: return id(first_boot);
          then:

          # set factory defaults for config lights:
          - lambda: |-
              auto call = id(small_light_on).turn_on();
              call.set_brightness(1.0f);
              call.set_rgb(0.0f, 1.0f, 0.0f);           // small light green when switch is on
              call.perform();
          - lambda: |-
              auto call = id(small_light_off).turn_on();
              call.set_brightness(0.75f);
              call.set_rgb(1.0f, 0.0f, 0.0f);           // small light red when switch is off
              call.perform();

          - lambda: |-
              auto call = id(big_light_on).turn_on();
              call.set_brightness(1.0f);
              call.set_rgb(0.0f, 1.0f, 1.0f);           // big light cyan when switch is on
              call.perform();
          - lambda: |-
              auto call = id(big_light_off).turn_on();
              call.set_brightness(0.25f);
              call.set_rgb(0.0f, 1.0f, 1.0f);           // big light cyan when switch is off but dimmer
              call.perform();

          # call factory test script.  It will loop forever until button is pressed.
          - script.execute: factory_test


globals:
  - id: first_boot          # used to run routine at factory to confirm
    type: bool              # correct firwmare is running.
    restore_value: yes
    initial_value: 'true'
  - id: finished_loop
    type: bool
    restore_value: no
    initial_value: 'false'


script:
  - id: factory_test
    mode: queued
    then:
      - delay: 1s
      - light.turn_off: big_light
      - light.turn_off: small_light
      - delay: 1s
      - light.turn_on:
          id: big_light
          brightness: 100%
          red: 100%
          green: 0%
          blue: 0%
          transition_length: 1s
      - delay: 1s
      - light.turn_on:
          id: small_light
          brightness: 100%
          red: 100%
          green: 0%
          blue: 0%
          transition_length: 1s
      - delay: 1s
      - light.turn_off: big_light
      - light.turn_off: small_light
      - delay: 1s

      - switch.turn_on: relay
      - light.turn_on:
          id: big_light
          brightness: 100%
          red: 0%
          green: 100%
          blue: 0%
          transition_length: 1s
      - delay: 1s
      - light.turn_on:
          id: small_light
          brightness: 100%
          red: 0%
          green: 100%
          blue: 0%
          transition_length: 1s
      - delay: 1s
      - light.turn_off: big_light
      - light.turn_off: small_light
      - switch.turn_off: relay
      - delay: 1s

      - light.turn_on:
          id: big_light
          brightness: 100%
          red: 0%
          green: 0%
          blue: 100%
          transition_length: 1s
      - delay: 1s
      - light.turn_on:
          id: small_light
          brightness: 100%
          red: 0%
          green: 0%
          blue: 100%
          transition_length: 1s
      - delay: 1s
      - light.turn_off: big_light
      - light.turn_off: small_light

      # repeat forever, will stop when button is pressed after finished_loop is set.
      - globals.set:
          id: finished_loop
          value: 'true'
      - script.execute: factory_test

  - id: script_toggle_factory
    then:
      # stop test loop if still going and first loop has finished.
      - if:
          condition:
            lambda: return ( id(finished_loop) );
          then:
            - globals.set:
                id: first_boot
                value: 'false'
            - script.execute: script_save_changes
            - script.stop: factory_test

  - id: script_blink_check_factory
    then:
      - if:            # don't blink status led during factory test
          condition:
            - lambda: return (id(first_boot));
          then:
            - script.stop: blink_status_led
      - if:            # don't blink status led if no_hass is on
          condition:
            - lambda: return (id(switch_no_hass).state);
          then:
            - script.stop: blink_status_led
